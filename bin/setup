#!/usr/bin/env crystal

require "colorize"

class Requirement
  getter :name, :type

  enum Type
    Executable
    File
  end

  def initialize(@name : String, @type : Type)
  end

  def exists? : Bool
    case type
    when Type::Executable
      File.exists?(path) && File.executable?(path)
    when Type::File
      File.exists?(path)
    else
      false
    end
  end

  def path : String
    case type
    when Type::Executable
      `which #{name}`.strip
    when Type::File
      File.expand_path(name)
    else
      ""
    end
  end
end

def error(message)
  puts(message.colorize.red)
  exit(1)
end

requirements = [
  Requirement.new(name: "php",      type: Requirement::Type::Executable),
  Requirement.new(name: "composer", type: Requirement::Type::Executable),
  Requirement.new(name: ".env",     type: Requirement::Type::File)
]
requirements.each do |r|
  next if r.exists?
  error("Missing #{r.type}: #{r.name}.")
end
puts("All requirements satisfied.".colorize.green)

system("composer install")
